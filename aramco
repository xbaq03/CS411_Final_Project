import os
import subprocess
import networkx as nx
import matplotlib.pyplot as plt
import math
from scipy.spatial import KDTree

def get_file_location():
    """Prompt the user to enter the file location."""
    file_location = input("Please enter the location of the file: ")
    return file_location

def validate_file(file_location):
    """Check if the provided file location exists and is a file."""
    if os.path.isfile(file_location):
        print(f"File found: {file_location}")
        return True
    else:
        print(f"File not found: {file_location}")
        return False

def run_command(file_location):
    """Run the command with the provided file."""
    command = f"python3 ../gp_binred.py -w {file_location}"
    try:
        result = subprocess.run(command, shell=True, check=True, capture_output=True, text=True)
        print(f"Command output:\n{result.stdout}")
    except subprocess.CalledProcessError as e:
        print(f"An error occurred while executing the command: {e.stderr}")
        return False
    return True

def parse_output_file(output_file):
    """Parse the output file to extract DX, DY, DZ information."""
    vertices = []
    try:
        with open(output_file, 'r') as file:
            for line in file:
                if line.startswith("DX"):
                    parts = line.split()
                    dx = float(parts[1])
                    dy = float(parts[3])
                    dz = float(parts[5])
                    vertices.append((dx, dy, dz))
        print("File parsed successfully.")
    except Exception as e:
        print(f"An error occurred while parsing the file: {e}")
    return vertices

def create_edges(vertices, distance_threshold):
    """Create edges based on distance threshold using a k-d tree."""
    edges = []
    kdtree = KDTree(vertices)
    for i, vertex in enumerate(vertices):
        indices = kdtree.query_ball_point(vertex, distance_threshold)
        for j in indices:
            if i != j:
                edges.append((i, j))
    return edges

def create_graph(vertices, edges):
    """Create and display a graph from the vertices and edges."""
    G = nx.Graph()
    for i, v in enumerate(vertices):
        G.add_node(i, pos=(v[0], v[1]))
    for e in edges:
        G.add_edge(*e)
    
    pos = nx.get_node_attributes(G, 'pos')
    nx.draw(G, pos, with_labels=True, node_size=500, node_color='skyblue', font_size=10)
    plt.show()

def save_metis_file(vertices, edges, output_file):
    """Save the graph in METIS format."""
    with open(output_file, 'w') as file:
        num_vertices = len(vertices)
        num_edges = len(edges)
        file.write(f"{num_vertices} {num_edges}\n")
        adjacency_list = {i: [] for i in range(num_vertices)}
        for edge in edges:
            adjacency_list[edge[0]].append(edge[1] + 1)  # METIS expects 1-based indexing
            adjacency_list[edge[1]].append(edge[0] + 1)  # METIS expects 1-based indexing
        
        for vertex in range(num_vertices):
            neighbors = " ".join(map(str, sorted(adjacency_list[vertex])))
            file.write(f"{neighbors}\n")

def main():
    """Main function to execute the script."""
    file_location = get_file_location()
    if validate_file(file_location):
        if run_command(file_location):
            output_file = "path_to_output_file_with_DX_DY_DZ.txt"  # Replace with the actual output file path
            vertices = parse_output_file(output_file)
            distance_threshold = 1.0  # Set your desired distance threshold
            edges = create_edges(vertices, distance_threshold)
            create_graph(vertices, edges)
            save_metis_file(vertices, edges, "metis_graph.txt")  # Save graph in METIS format

if __name__ == "__main__":
    main()
